/*
-Anthony Jesus Retana Contreras 
Fase 3 proyecto Bases de datos
Creado el 19/2/2023 
Ultima modificacion 4/2/2023

El documento para presentar será un script que genere la Base de Datos con el nombre
<<SuNombre>>_ProyectoBD_Fase2, y todo lo solicitado.*/
CREATE DATABASE ANTHONYJESUSRETANACONTRERAS_PROYECTOBD_FASE2
GO
USE ANTHONYJESUSRETANACONTRERAS_PROYECTOBD_FASE2
GO
-----------------------------------------------------------------------------------
--1. Al menos 10 tablas (utilizar formatos básicos, normalización y propiedades de campos)
CREATE TABLE ESTUDIANTES(
	IDENTIFICACIONESTUDIAN varchar(9) PRIMARY KEY,
	NOMBRE varchar(10) NOT NULL,
	APELLIDO1 varchar(15) NOT NULL,
	APELLIDO2 varchar(15),
	NUMEROTELEFONO varchar(10) NOT NULL,
	CORREOELECTRONICO varchar(20),
	FECHANACIMIENTO date NOT NULL,
	BACHILLERATO varchar(3) NOT NULL default 'YES',
	PROVINCIA varchar(10) NOT NULL,
	CANTON varchar(10),
	DIRECCIONEXACTA varchar(50),
	IDENTIDADGENERO varchar(3) NOT NULL
);
--Restricciones de ESTUDIANTES
ALTER TABLE ESTUDIANTES
	ADD CONSTRAINT CHK_BACHILLERATO CHECK(BACHILLERATO='YES' OR BACHILLERATO='NO');
ALTER TABLE ESTUDIANTES
	ADD CONSTRAINT CHK_NACIMIENTO CHECK(FECHANACIMIENTO<GETDATE());
ALTER TABLE ESTUDIANTES
	ADD CONSTRAINT CHK_PROVINCIA CHECK(PROVINCIA='ALAJUELA' OR PROVINCIA='SAN JOSE' OR PROVINCIA='HEREDIA' OR PROVINCIA='CARTAGO' OR
		PROVINCIA='LIMON' OR PROVINCIA='GUANACASTE' OR PROVINCIA='PUNTARENAS');
ALTER TABLE ESTUDIANTES
	ADD CONSTRAINT CHK_IDENGENERO CHECK(IDENTIDADGENERO='MAS' OR IDENTIDADGENERO='FEM' OR IDENTIDADGENERO='NOB');
----------------------------------------------------
CREATE TABLE SITUACIONESSOCIALES(
	ID_SOCIAL int PRIMARY KEY,
	IDENTIFICACIONESTUDIAN varchar(9) NOT NULL,
	ESTADOSOCIAL varchar(3) DEFAULT 'BUE',
	RESUMEN varchar(100) DEFAULT ''
);
--Restricciones de SITUACIONESSOCIALES
ALTER TABLE SITUACIONESSOCIALES
	ADD CONSTRAINT CHK_ESTADOSOCIAL CHECK(ESTADOSOCIAL='BUE' OR ESTADOSOCIAL='REG' OR ESTADOSOCIAL='REG');
-------------------------------------------------------
CREATE TABLE BECAS(
	ID_BECAS int PRIMARY KEY,
	ID_SOCIAL int NOT NULL,
	IDENTIFICACIONESTUDIAN varchar(9) NOT NULL,
	BECA1 varchar(1) default 'N',
	BECA2 varchar(1) default 'N'
);
--Restricciones de BECAS
ALTER TABLE BECAS
	ADD CONSTRAINT CHK_BECA1 CHECK(BECA1 = 'N' OR BECA1='S');
ALTER TABLE BECAS
	ADD CONSTRAINT CHK_BECA2 CHECK(BECA2='N' OR BECA2='S')
-----------------------------------------------------------
CREATE TABLE LABORATORIOS(
	NUMLAB tinyint PRIMARY KEY,
	CAPACIDAD tinyint NOT NULL,
	HORAAPER time NOT NULL DEFAULT '07:00',
	HORACLAU time NOT NULL DEFAULT '18:00'
);
--Restricciones de LABORATORIOS
ALTER TABLE LABORATORIOS
	ADD CONSTRAINT CHK_CAPACIDAD CHECK(CAPACIDAD>14);
ALTER TABLE LABORATORIOS
	ADD CONSTRAINT CHK_HORAAPER CHECK(HORAAPER>= '7:00' AND HORAAPER<='14:00');
ALTER TABLE LABORATORIOS
	ADD CONSTRAINT CHK_HORACLAU CHECK(HORACLAU > HORAAPER AND HORACLAU <='18:00');
-------------------------------------------------------------------------------------
CREATE TABLE PROFESORES(
	ID_PROFESOR varchar(9) PRIMARY KEY,
	NOMBRE varchar(10) NOT NULL,
	APELLIDO1 varchar(15) NOT NULL,
	APELLIDO2 varchar(15),
	NUMEROTELEFONO varchar(10) NOT NULL,
	CORREOELECTRONICO varchar(20),
	CORREOINSTITU varchar(20) NOT NULL,
	FECHANACIMIENTO date NOT NULL,
	PROVINCIA varchar(10) NOT NULL,
	CANTON varchar(10),
	IDENTIDADGENERO varchar(3) NOT NULL
);
--Restricciones de PROFESORES
ALTER TABLE PROFESORES
	ADD CONSTRAINT CHK_FECHANACIMIENTO CHECK(FECHANACIMIENTO<getdate());
ALTER TABLE PROFESORES 
	ADD CONSTRAINT CHK_PROVINCIA_P CHECK(PROVINCIA='ALAJUELA' OR PROVINCIA='SAN JOSE' OR PROVINCIA='HEREDIA' OR PROVINCIA='CARTAGO' OR
		PROVINCIA='LIMON' OR PROVINCIA='GUANACASTE' OR PROVINCIA='PUNTARENAS');
ALTER TABLE PROFESORES
	ADD CONSTRAINT CHK_IDENGENERO_P CHECK(IDENTIDADGENERO='MAS' OR IDENTIDADGENERO='FEM' OR IDENTIDADGENERO='NOB');
----------------------------------------------------
CREATE TABLE VACACIONES(
	ID_VACACIONES VARCHAR(6) PRIMARY KEY,
	ID_PROFESOR	varchar(9) NOT NULL,
	FECHAINICIO date not null,
	CANTIDADDIAS tinyint NOT NULL
);
-------------------------------------------------------
CREATE TABLE CERTIFICACIONES(
	ID_CERTIFICACION varchar(6) PRIMARY KEY,
	ID_PROFESOR	varchar(9) NOT NULL
);
------------------------------------------------------
CREATE TABLE PROGRAMAS(
	ID_PROGRAMA varchar(6) PRIMARY KEY,
	NOMBRE varchar(45) NOT NULL,
	CANTIDADMODULOS tinyint DEFAULT 3,
	DESCRIPCION varchar(100) DEFAULT ''
);
CREATE TABLE MODULOS(
	ID_MODULO varchar(10) PRIMARY KEY,
	ID_PROGRAMA varchar(6) NOT NULL,
	NOMBREMODULO varchar(45) NOT NULL,
	HORAS tinyint NOT NULL,
	PRECIO INT NOT NULL,
	DESCRIPCION VARCHAR(100) DEFAULT ''
);
CREATE TABLE MODULOSABIERTOS(
	ID_MODUABIER varchar(10) PRIMARY KEY,
	FECHA_APER date default getdate(),
	ID_MODULO varchar(10) NOT NULL,
	REQUISITOS varchar(10),
	ID_PROFESOR	varchar(9) Not null,
	ID_CERTIFICACION varchar(6) NOT NULL,
	NUMLAB TINYINT NOT NULL,
	GRUPOS TINYINT NOT NULL,
	CUPOS TINYINT NOT NULL,
);
CREATE TABLE HORARIOS(
	ID_HORARIO int PRIMARY KEY,
	ID_MODULOABIERTO varchar(10) NOT NULL,
	HORAINICIO time NOT NULL,
	HORAFIN time NOT NULL
);
--Restricciones de HORARIOS
ALTER TABLE HORARIOS
	ADD CONSTRAINT CHK_HORAINICIO CHECK(HORAINICIO>= '7:00' AND HORAINICIO<='16:00');
ALTER TABLE HORARIOS 
	ADD CONSTRAINT CHK_HORAFIN CHECK(HORAFIN>HORAINICIO AND HORAFIN<='18:00');
-----------------------------------------------------------
CREATE TABLE MATRICULAS(
	NUM_MATRICULA int PRIMARY KEY,
	IDENTIFICACIONESTUDIAN varchar(9) NOT NULL,
	ID_MODULOABIER varchar(10) NOT NULL,
	FECHAMATRICULA date default getdate(),
	ESTADOMATRICULA varchar(3) NOT NULL
);
--Restricciones de MATRICULAS
ALTER TABLE MATRICULAS
	ADD CONSTRAINT CHK_ESTADOMATRI CHECK(ESTADOMATRICULA = 'INA' OR ESTADOMATRICULA = 'ACT')
-------------------------------------------------------------
CREATE TABLE FACTURAS(
	ID_FACTURA int PRIMARY KEY,
	ID_BECA int NOT NULL,
	NUM_MATRICULA int NOT NULL,
	SUBTOTAL int NOT NULL,
	DESCUENTO int default 0,
	TOTAL real NOT NULL,
	PAGOACEPTADO bit NOT NULL default 0
);
--Restricciones de FACTURAS
ALTER TABLE FACTURAS 
	ADD CONSTRAINT CH_PAGOACEPTADO CHECK(PAGOACEPTADO=0 or PAGOACEPTADO=1);
	--------------------------------------------------------------------------
CREATE TABLE NOTAS(
	ID_NOTAS int PRIMARY KEY,
	IDENTIFICACIONESTUDIAN varchar(9) NOT NULL,
	ID_MODULOABIER varchar(10) NOT NULL,
	PORCENTAJE tinyint DEFAULT 0,
	APROVADO varchar(3) DEFAULT 'APR'
);
--Restricciones de NOTAS
ALTER TABLE NOTAS
	ADD CONSTRAINT CHK_NOTAS_APROVADO CHECK(APROVADO='APR' OR APROVADO='REP');
----------------------------------------------------------------------------
--Establecer las relaciones entre tablas (con integridad referencial)
ALTER TABLE SITUACIONESSOCIALES
	ADD CONSTRAINT FK_IDENTIFICACIONSOCIO FOREIGN KEY (IDENTIFICACIONESTUDIAN) REFERENCES ESTUDIANTES(IDENTIFICACIONESTUDIAN);

ALTER TABLE BECAS
	ADD CONSTRAINT FK_BECAS_SITUACION FOREIGN KEY (ID_SOCIAL) REFERENCES SITUACIONESSOCIALES (ID_SOCIAL);
ALTER TABLE BECAS
	ADD CONSTRAINT FK_IDENTIFICACIONBECA FOREIGN KEY (IDENTIFICACIONESTUDIAN) REFERENCES ESTUDIANTES(IDENTIFICACIONESTUDIAN);

ALTER TABLE VACACIONES
	ADD CONSTRAINT FK_ID_VACACIONESPRO FOREIGN KEY (ID_PROFESOR) REFERENCES PROFESORES(ID_PROFESOR);

ALTER TABLE CERTIFICACIONES
	ADD CONSTRAINT FK_IDCERTIPROF FOREIGN KEY (ID_PROFESOR) REFERENCES PROFESORES(ID_PROFESOR);

ALTER TABLE MODULOS
	ADD CONSTRAINT FK_MODULOS_ID_PROGRAMA FOREIGN KEY(ID_PROGRAMA) REFERENCES PROGRAMAS(ID_PROGRAMA);

ALTER TABLE MODULOSABIERTOS
	ADD CONSTRAINT FK_MA_ID_MODULO FOREIGN KEY(ID_MODULO) REFERENCES MODULOS(ID_MODULO);
ALTER TABLE MODULOSABIERTOS
	ADD CONSTRAINT FK_MA_REQUISITOS FOREIGN KEY(REQUISITOS) REFERENCES MODULOS(ID_MODULO);
ALTER TABLE MODULOSABIERTOS
	ADD CONSTRAINT FK_MA_ID_PROFESOR FOREIGN KEY(ID_PROFESOR) REFERENCES PROFESORES(ID_PROFESOR);
ALTER TABLE MODULOSABIERTOS
	ADD CONSTRAINT FK_MA_ID_CERTIFICACION FOREIGN KEY(ID_CERTIFICACION) REFERENCES CERTIFICACIONES(ID_CERTIFICACION);
ALTER TABLE MODULOSABIERTOS
	ADD CONSTRAINT FK_NUM_LAB FOREIGN KEY (NUMLAB) REFERENCES LABORATORIOS(NUMLAB);

ALTER TABLE HORARIOS
	ADD CONSTRAINT FK_ID_MOD_ABIER_HO FOREIGN KEY (ID_MODULOABIERTO) REFERENCES MODULOSABIERTOS(ID_MODUABIER);

ALTER TABLE MATRICULAS 
	ADD CONSTRAINT FK_ID_ESTU_MATRI FOREIGN KEY (IDENTIFICACIONESTUDIAN) REFERENCES ESTUDIANTES(IDENTIFICACIONESTUDIAN);
ALTER TABLE MATRICULAS
	ADD CONSTRAINT FK_ID_MODABIER_MATR FOREIGN KEY (ID_MODULOABIER) REFERENCES MODULOSABIERTOS(ID_MODUABIER);

ALTER TABLE FACTURAS
	ADD CONSTRAINT FK_NUMMATRI_FAC FOREIGN KEY(NUM_MATRICULA) REFERENCES MATRICULAS(NUM_MATRICULA);

ALTER TABLE FACTURAS
	ADD CONSTRAINT FK_BECA_FACTURA FOREIGN KEY(ID_BECA) REFERENCES BECAS(ID_BECAS);

ALTER TABLE NOTAS
	ADD CONSTRAINT FK_NOTA_ID_ESTU FOREIGN KEY(IDENTIFICACIONESTUDIAN) REFERENCES ESTUDIANTES(IDENTIFICACIONESTUDIAN);
ALTER TABLE NOTAS
	ADD CONSTRAINT FK_ID_MODABIER_NOTAS FOREIGN KEY(ID_MODULOABIER) REFERENCES MODULOSABIERTOS(ID_MODUABIER);
--------------------------------------------------------------------------------------------------------------
--3. Al menos 10 registros en cada tabla.
INSERT INTO ESTUDIANTES(IDENTIFICACIONESTUDIAN,NOMBRE,APELLIDO1,APELLIDO2,NUMEROTELEFONO,FECHANACIMIENTO,PROVINCIA,IDENTIDADGENERO)
	VALUES	('101110111','ANA','SOTO','MATA','11111111','20020101','ALAJUELA','FEM'),
			('202220222','JUAN','PEREZ','SOLIS','22222222','20020202','LIMON','MAS'),
			('303330333','GINA','MARIN','GARCIA','333333333','20020303','CARTAGO','NOB'),
			('404440444','NINI','MARQUES','MARQUES','44444444','20220404','ALAJUELA','NOB'),
			('505550555','SANTI','SOTO','MASON','55555555','20020505','GUANACASTE','MAS'),
			('606660666','JERRY','MARTINEZ','CARLES','66666666','20020606','PUNTARENAS','MAS'),
			('707770777','NANA','CONTRERAS','MATARRITA','77777777','20020707','LIMON','FEM'),
			('808880888','MARTA','DE LA O','SANTOS','88888888','20020808','GUANACASTE','FEM'),
			('909990999','MATI','INSOPORTUS','ODIOSUS','99999999','20020909','HEREDIA','MAS'),
			('504470623','YULIANA','ROJAS','VALENCIANO','61088362','20030201','ALAJUELA','FEM');
INSERT INTO SITUACIONESSOCIALES(ID_SOCIAL,IDENTIFICACIONESTUDIAN)
	VALUES	(1,'101110111'),
			(2,'202220222'),
			(3,'303330333'),
			(4,'404440444'),
			(5,'505550555'),
			(6,'606660666'),
			(7,'707770777'),
			(8,'808880888'),
			(9,'909990999'),
			(10,'504470623');
INSERT INTO BECAS(ID_BECAS,ID_SOCIAL,IDENTIFICACIONESTUDIAN,BECA1,BECA2)
	VALUES	(1,1,'101110111','S','S'),
			(2,2,'202220222','N','S'),
			(3,3,'303330333','N','N'),
			(4,4,'404440444','S','S'),
			(5,5,'505550555','N','S'),
			(6,6,'606660666','N','N'),
			(7,7,'707770777','N','N'),
			(8,8,'808880888','S','S'),
			(9,9,'909990999','N','N'),
			(10,10,'504470623','S','N');
INSERT INTO LABORATORIOS(NUMLAB,CAPACIDAD)
	VALUES	(1,15),
			(2,20),
			(3,17),
			(4,30),
			(5,20),
			(6,25),
			(7,23),
			(8,15),
			(9,16),
			(10,19);
INSERT INTO PROFESORES(ID_PROFESOR,NOMBRE,APELLIDO1,APELLIDO2,NUMEROTELEFONO,CORREOINSTITU,FECHANACIMIENTO,PROVINCIA,IDENTIDADGENERO)
	VALUES	('PROF0001','MARIA','SABRE','SANCHO','10000000','1@INA.COM','19750101','ALAJUELA','FEM'),
			('PROF0002','MARY','LIZ','SANCHO','20000000','2@INA.COM','19750102','CARTAGO','FEM'),
			('PROF0003','MATI','DE LA O','ARIAS','30000000','3@INA.COM','19750103','PUNTARENAS','NOB'),
			('PROF0004','KARLA','RETANA','LENAY','40000000','4@INA.COM','19750104','GUANACASTE','FEM'),
			('PROF0005','JULIETA','VENEGAS','','50000000','5@INA.COM','19750105','LIMON','FEM'),
			('PROF0006','GINA','SABORIO','MATARRITA','60000000','6@INA.COM','19750106','HEREDIA','FEM'),
			('PROF0007','BRUCE','WAYNE','DIAS','70000000','7@INA.COM','19750107','ALAJUELA','NOB'),
			('PROF0008','MARIA','SABRE','SANCHO','90000000','9@INA.COM','19750108','CARTAGO','FEM'),
			('PROF0009','KATIA','LIZANDRO','JOT','11000000','10@INA.COM','19750110','SAN JOSE','FEM'),
			('PROF0010','MARTA','LEGRINI','SOTO','80000000','8@INA.COM','19750108','ALAJUELA','FEM');
INSERT INTO VACACIONES(ID_VACACIONES,ID_PROFESOR,FECHAINICIO,CANTIDADDIAS)
	VALUES	('VAC001','PROF0001','20230808',15),
			('VAC002','PROF0001','20231208',10),
			('VAC003','PROF0003','20230808',15),
			('VAC004','PROF0004','20230908',11),
			('VAC005','PROF0005','20231201',20),
			('VAC006','PROF0006','20240115',10),
			('VAC007','PROF0007','20240120',15),
			('VAC008','PROF0008','20240201',5),
			('VAC009','PROF0009','20240220',30),
			('VAC010','PROF0010','20240815',15);

INSERT INTO PROGRAMAS(ID_PROGRAMA,NOMBRE,CANTIDADMODULOS)
	VALUES	('PR-DMV','PROGRAMACION DE DISPOSITIVOS MOVILES',4),
			('PR-SIE','PROGRAMACION DE SISTEMAS DE ESCRITORIO',3),
			('PR-PGW','PROGRAMACION DE PAGINAS WEB',5),
			('NO-001','PRUEBA 1',5),
			('NO-002','PRUEBA 2',5),
			('NO-003','PRUEBA 3',5),
			('NO-004','PRUEBA 4',5),
			('NO-005','PRUEBA 5',5),
			('NO-006','PRUEBA 6',5),
			('NO-007','PRUEBA 7',5);
INSERT INTO MODULOS(ID_MODULO,ID_PROGRAMA,NOMBREMODULO,HORAS,PRECIO)
	VALUES	('MV-001','PR-DMV','PROGRAMACION PARA ANDROID I',120,250000),
			('MV-002','PR-DMV','PROGRAMACION PARA ANDROID II',110,240000),
			('MV-003','PR-DMV','PROGRAMACION PARA AMDROID III',100,220000),
			('MV-004','PR-DMV','PROGRAMACION PARA APLICACIONES MIXTAS',100,195000),
			('SE-001','PR-SIE','LOGICA COMPUTACIONAL',140,225000),
			('SE-002','PR-SIE','INTRODUCCION A JAVA',150,335000),
			('SE-003','PR-SIE','PROGRAMACION ORIENTADA A OBJETOS',160,345000),
			('PW-001','PR-PGW','HTML',90,185000),
			('PW-002','PR-PGW','CSS',60,175000),
			('PW-003','PR-PGW','JAVASCRIPT',70,180000),
			('PW-004','PR-PGW','BOOTSTRAP',90,1850000),
			('PW-005','PR-PGW','NODE JS',90,185000);

INSERT INTO CERTIFICACIONES(ID_CERTIFICACION,ID_PROFESOR)
	VALUES	('MV-001','PROF0001'),
			('MV-002','PROF0002'),
			('MV-003','PROF0002'),
			('MV-004','PROF0003'),
			('SE-001','PROF0004'),
			('SE-002','PROF0005'),
			('SE-003','PROF0005'),
			('PW-001','PROF0005'),
			('PW-002','PROF0006'),
			('PW-003','PROF0007'),
			('PW-004','PROF0007'),
			('PW-005','PROF0009');

INSERT INTO MODULOSABIERTOS(ID_MODUABIER,ID_MODULO,ID_PROFESOR,ID_CERTIFICACION,REQUISITOS,NUMLAB,GRUPOS,CUPOS)
	VALUES	('MAB-001','MV-001','PROF0001','MV-001',NULL,1,1,15),
			('MAB-002','MV-002','PROF0002','MV-002','MV-001',2,1,15),
			('MAB-003','MV-003','PROF0002','MV-003','MV-002',3,1,15),
			('MAB-004','MV-004','PROF0003','MV-004','MV-003',4,1,15),
			('MAB-005','SE-001','PROF0004','SE-001',NULL,5,1,15),
			('MAB-006','SE-002','PROF0005','SE-002','SE-001',1,1,15),
			('MAB-007','SE-003','PROF0005','SE-003','SE-002',2,1,15),
			('MAB-008','PW-001','PROF0005','PW-001',NULL,3,1,15),
			('MAB-009','PW-002','PROF0006','PW-002','PW-001',4,1,15),
			('MAB-010','PW-003','PROF0007','PW-003','PW-002',5,1,15);

INSERT INTO HORARIOS(ID_HORARIO,ID_MODULOABIERTO,HORAINICIO,HORAFIN)
	VALUES	(1,'MAB-001','7:00','9:00'),
			(2,'MAB-002','7:00','9:00'),
			(3,'MAB-003','8:00','11:00'),
			(4,'MAB-004','7:00','9:00'),
			(5,'MAB-005','7:00','9:00'),
			(6,'MAB-006','7:00','9:00'),
			(7,'MAB-007','13:00','15:00'),
			(8,'MAB-008','13:00','16:00'),
			(9,'MAB-009','13:00','16:00'),
			(10,'MAB-010','14:00','17:00');

INSERT INTO MATRICULAS(NUM_MATRICULA,IDENTIFICACIONESTUDIAN,ID_MODULOABIER,ESTADOMATRICULA)
	VALUES	(1,'101110111','MAB-001','ACT'),
			(2,'202220222','MAB-001','ACT'),
			(3,'101110111','MAB-005','ACT'),
			(4,'303330333','MAB-005','ACT'),
			(5,'505550555','MAB-008','INA'),
			(6,'606660666','MAB-001','ACT'),
			(7,'606660666','MAB-008','ACT'),
			(8,'808880888','MAB-005','ACT'),
			(9,'909990999','MAB-001','ACT'),
			(10,'909990999','MAB-008','ACT');
INSERT INTO FACTURAS(ID_FACTURA,NUM_MATRICULA,ID_BECA,SUBTOTAL,TOTAL,PAGOACEPTADO)
	VALUES	(1,1,1,0,0,1),
			(2,2,2,0,0,1),
			(3,3,1,0,0,1),
			(4,4,3,0,0,1),
			(5,5,5,0,0,1),
			(6,6,6,0,0,1),
			(7,6,6,0,0,1),
			(8,8,8,0,0,1),
			(9,9,9,0,0,0),
			(10,10,9,0,0,1);

INSERT INTO NOTAS(ID_NOTAS,IDENTIFICACIONESTUDIAN,ID_MODULOABIER)
	VALUES	(1,'101110111','MAB-001'),
			(2,'202220222','MAB-001'),
			(3,'101110111','MAB-005'),
			(4,'303330333','MAB-005'),
			(5,'505550555','MAB-008'),
			(6,'606660666','MAB-001'),
			(7,'606660666','MAB-008'),
			(8,'808880888','MAB-005'),
			(9,'909990999','MAB-001'),
			(10,'909990999','MAB-008');
--*******************************************************************************************--
--4. Al menos 20 consultas, desglosadas de la siguiente manera:
--a. 6 consultas de selección simples con varias tablas y utilizando diferentes criterios (utilice varias formas de join)
SELECT E.NOMBRE,APELLIDO1,APELLIDO2,NUM_MATRICULA
FROM ESTUDIANTES E INNER JOIN MATRICULAS M 
	ON E.IDENTIFICACIONESTUDIAN=M.IDENTIFICACIONESTUDIAN;
/**/

SELECT P.NOMBRE, APELLIDO1, NOMBREMODULO
FROM PROFESORES P LEFT JOIN MODULOSABIERTOS MA
	ON P.ID_PROFESOR=MA.ID_PROFESOR
	INNER JOIN MODULOS M
	ON M.ID_MODULO=MA.ID_MODULO;
/**/

SELECT PR.NOMBRE,APELLIDO1, P.NOMBRE , NOMBREMODULO
FROM PROGRAMAS P INNER JOIN MODULOS M
	ON P.ID_PROGRAMA=M.ID_PROGRAMA
	INNER JOIN MODULOSABIERTOS MA
	ON M.ID_MODULO=MA.ID_MODULO
	INNER JOIN PROFESORES PR
	ON PR.ID_PROFESOR=MA.ID_PROFESOR
WHERE IDENTIDADGENERO='FEM';
/**/

SELECT E.NOMBRE+' '+E.APELLIDO1 AS ESTUDIANTE, P.NOMBRE +' '+P.APELLIDO1 AS PROFESOR
FROM ESTUDIANTES E RIGHT JOIN MATRICULAS M
	ON E.IDENTIFICACIONESTUDIAN = M.IDENTIFICACIONESTUDIAN
	INNER JOIN MODULOSABIERTOS MA
	ON MA.ID_MODUABIER=M.ID_MODULOABIER
	INNER JOIN PROFESORES P
	ON P.ID_PROFESOR = MA.ID_PROFESOR
WHERE P.ID_PROFESOR='PROF0005';
/**/

SELECT NOMBREMODULO
FROM MODULOS MO LEFT JOIN MODULOSABIERTOS MA
	ON MO.ID_MODULO = MA.ID_MODULO
WHERE MA.ID_MODUABIER IS NULL;
/**/

SELECT NOMBRE,APELLIDO1,APELLIDO2
FROM PROFESORES P LEFT JOIN MODULOSABIERTOS MA
	ON P.ID_PROFESOR=MA.ID_PROFESOR
WHERE MA.ID_PROFESOR IS NULL;
/**/

--b. 8 consultas de selección utilizando funciones agregadas (having, group by), utilice funciones aritméticas, de manejo de cadenas y de fecha.
SELECT NOMBRE,APELLIDO1,APELLIDO2,COUNT(MA.ID_PROFESOR) AS CANTIDAD_A_IMPARTIR
FROM PROFESORES P INNER JOIN MODULOSABIERTOS MA
	ON P.ID_PROFESOR=MA.ID_PROFESOR
GROUP BY NOMBRE,APELLIDO1,APELLIDO2;

SELECT NOMBRE, SUM(HORAS) AS CANTIDAD_TOTAL_HORAS
FROM PROGRAMAS P INNER JOIN MODULOS M
	ON P.ID_PROGRAMA=M.ID_PROGRAMA
GROUP BY NOMBRE

SELECT NOMBRE, AVG(HORAS) AS CANTIDAD_TOTAL_HORAS
FROM PROGRAMAS P INNER JOIN MODULOS M
	ON P.ID_PROGRAMA=M.ID_PROGRAMA
GROUP BY NOMBRE
HAVING AVG(HORAS)>100;

SELECT NOMBRE+' '+APELLIDO1+' '+APELLIDO2 AS NOMBRE, COUNT(M.IDENTIFICACIONESTUDIAN) AS CANTIDAD_MATRICULAS
FROM ESTUDIANTES E INNER JOIN MATRICULAS M
	ON E.IDENTIFICACIONESTUDIAN= M.IDENTIFICACIONESTUDIAN
GROUP BY NOMBRE,APELLIDO1,APELLIDO2;

SELECT P.NOMBRE,SUM(PRECIO) AS PRECIOFINAL
FROM PROGRAMAS P LEFT JOIN MODULOS M
	ON P.ID_PROGRAMA=M.ID_PROGRAMA
WHERE M.ID_PROGRAMA IS NOT NULL
GROUP BY NOMBRE;

SELECT NOMBRE, DATEDIFF(YY,FECHANACIMIENTO,GETDATE()) AS EDAD
FROM ESTUDIANTES;

SELECT NOMBRE, APELLIDO1,APELLIDO2
FROM ESTUDIANTES
WHERE LEN(NOMBRE)>4;

--c. 2 consultas de selección ordenando datos
SELECT NOMBRE,APELLIDO1,APELLIDO2
FROM ESTUDIANTES
ORDER BY NOMBRE;

SELECT NOMBREMODULO,HORAS AS HORAS_MENOR_MAYOR
FROM MODULOS
ORDER BY HORAS;

--d. 2 consultas de selección con unión o con subconsultas
SELECT NOMBREMODULO
FROM MODULOS
WHERE PRECIO<ANY(
	SELECT AVG(PRECIO)
	FROM MODULOS);

SELECT NOMBREMODULO
FROM MODULOS
WHERE PRECIO>ALL(
	SELECT AVG(PRECIO)
	FROM MODULOS);

--e. 2 consultas del tipo que usted seleccione
SELECT NOMBRE, APELLIDO1,APELLIDO2
FROM ESTUDIANTES E LEFT JOIN MATRICULAS M
	ON E.IDENTIFICACIONESTUDIAN = M.IDENTIFICACIONESTUDIAN
WHERE M.IDENTIFICACIONESTUDIAN IS NULL;

SELECT NOMBRE,APELLIDO1,APELLIDO2 
FROM ESTUDIANTES E
WHERE 2=(SELECT COUNT(M.IDENTIFICACIONESTUDIAN) 
	FROM MATRICULAS M
	WHERE E.IDENTIFICACIONESTUDIAN=M.IDENTIFICACIONESTUDIAN)

-----------------------------------------------------------------------------------------------------
/*Correciones de fase 2*/

ALTER TABLE MODULOSABIERTOS
	DROP CONSTRAINT FK_MA_ID_CERTIFICACION;

ALTER TABLE MODULOSABIERTOS
	DROP COLUMN ID_CERTIFICACION;


CREATE TABLE CERTIFICADO(
	COD_CERTIFI INT PRIMARY KEY,
	NOMBRE VARCHAR(50) NOT NULL
);
ALTER TABLE CERTIFICACIONES
	ADD COD_CERTIFI INT;
ALTER TABLE MODULOS
	ADD COD_CERTIFI INT;

ALTER TABLE MODULOS
	ADD CONSTRAINT FK_MOD_COD_CERTI FOREIGN KEY (COD_CERTIFI) REFERENCES CERTIFICADO(COD_CERTIFI);
ALTER TABLE CERTIFICACIONES
	ADD CONSTRAINT FK_CER_COD_CERTI FOREIGN KEY (COD_CERTIFI) REFERENCES CERTIFICADO(COD_CERTIFI);

ALTER TABLE HORARIOS
	ADD LUNES VARCHAR(1);
ALTER TABLE HORARIOS
	ADD MARTES VARCHAR(1);
ALTER TABLE HORARIOS
	ADD MIERCOLES VARCHAR(1);
ALTER TABLE HORARIOS
	ADD JUEVES VARCHAR(1);
ALTER TABLE HORARIOS
	ADD VIERNES VARCHAR(1);

CREATE TABLE FERIADO(
	COD_FERIADO INT PRIMARY KEY,
	FECHA DATE NOT NULL,
	NOMBRE VARCHAR(10)
);

ALTER TABLE MODULOSABIERTOS
	ADD FECHAFIN DATE;

------------------------------------------------------------------------------------------------


--1. Al menos 4 procedimientos almacenados (CRUD "Crear, Leer, Actualizar, Borrar") para cada tabla
--Estudiantes
GO
CREATE OR ALTER PROCEDURE SP_CREAR_ESTUDIANTE(@ID VARCHAR(9),@NOMBRE VARCHAR(10),@APELLIDO1 VARCHAR(15),@TELEFONO VARCHAR(10),
		@FECHA DATE, @BACHILLERATO VARCHAR(3),@PROVINCIA VARCHAR(10),@GEN VARCHAR(3), @MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM ESTUDIANTES WHERE IDENTIFICACIONESTUDIAN = @ID)
				BEGIN
					INSERT INTO ESTUDIANTES(IDENTIFICACIONESTUDIAN,NOMBRE,APELLIDO1,NUMEROTELEFONO,FECHANACIMIENTO,BACHILLERATO,PROVINCIA,IDENTIDADGENERO)
						VALUES(@ID,@NOMBRE,@APELLIDO1,@TELEFONO,@FECHA,@BACHILLERATO,@PROVINCIA,@GEN)
					SET @MSJ= 'SE CREO EL ESTUDIANTE'
				END
		END TRY

		BEGIN CATCH
			SET @MSJ = ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_ESTUDIANTE(@ID VARCHAR(9),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM ESTUDIANTES WHERE IDENTIFICACIONESTUDIAN = @ID)
				BEGIN
					SET @MSJ= (SELECT IDENTIFICACIONESTUDIAN+' '+NOMBRE+' '+APELLIDO1+' '+NUMEROTELEFONO+' '+CAST(FECHANACIMIENTO AS varchar)+' '+
						BACHILLERATO+' '+PROVINCIA+' '+IDENTIDADGENERO
					FROM ESTUDIANTES WHERE IDENTIFICACIONESTUDIAN=@ID)
				END
		END TRY

		BEGIN CATCH
			SET @MSJ = ERROR_MESSAGE()
		END CATCH
	END
-------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_ESTUDIANTE(@ID VARCHAR(9),@NOMBRE VARCHAR(10),@APELLIDO1 VARCHAR(15),@TELEFONO VARCHAR(10),
		@FECHA DATE, @BACHILLERATO VARCHAR(3),@PROVINCIA VARCHAR(10),@GEN VARCHAR(3), @MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM ESTUDIANTES WHERE IDENTIFICACIONESTUDIAN = @ID)
				BEGIN
					UPDATE ESTUDIANTES SET NOMBRE = @NOMBRE, APELLIDO1=@APELLIDO1,NUMEROTELEFONO=@TELEFONO,FECHANACIMIENTO=@FECHA,
							BACHILLERATO=@BACHILLERATO,PROVINCIA=@PROVINCIA,IDENTIDADGENERO=@GEN
						WHERE IDENTIFICACIONESTUDIAN = @ID
					SET @MSJ='sE ACTUALIZO AL ESTUDIANTE'
				END
		END TRY

		BEGIN CATCH
			SET @MSJ = ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_ESTUDIANTE (@ID VARCHAR(9), @MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY 
			IF EXISTS(SELECT 1 FROM ESTUDIANTES WHERE IDENTIFICACIONESTUDIAN=@ID)
				BEGIN
					DELETE ESTUDIANTES WHERE IDENTIFICACIONESTUDIAN = @ID
				END
		END TRY

		BEGIN CATCH
			SET @MSJ = ERROR_MESSAGE()
		END CATCH
	END
---------------------------------------------------------------------------------------
--Notas
GO
CREATE OR ALTER PROCEDURE SP_CREAR_NOTA(@ID INT,@IDEST VARCHAR(9),@IDMA VARCHAR(10),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM NOTAS WHERE ID_NOTAS=@ID)
				BEGIN
					INSERT INTO NOTAS(ID_NOTAS,IDENTIFICACIONESTUDIAN,ID_MODULOABIER)
						VALUES(@ID,@IDEST,@IDMA)
					SET @MSJ = 'SE INGRESO LA NOTA'
				END
		END TRY

		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_NOTAS (@ID INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS (SELECT 1 FROM NOTAS WHERE ID_NOTAS=@ID)
				BEGIN
					SET @MSJ=(SELECT CAST(ID_NOTAS AS varchar)+' '+IDENTIFICACIONESTUDIAN+' '+ID_MODULOABIER+' '+CAST(PORCENTAJE AS varchar)+' '+
						CAST(APROVADO AS varchar)
					FROM NOTAS WHERE ID_NOTAS=@ID)
				END
		END TRY

		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_NOTAS (@ID INT,@IDEST VARCHAR(9),@IDMA VARCHAR(10),@MSJ VARCHAR(100) OUT, @NOTA INT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM NOTAS WHERE ID_NOTAS=@ID) 
				BEGIN
					UPDATE NOTAS SET IDENTIFICACIONESTUDIAN=@IDEST, ID_MODULOABIER=@IDMA,PORCENTAJE=@NOTA WHERE ID_NOTAS=@ID
					SET @MSJ='SE ACTUALIZO LA NOTA'
				END
		END TRY

		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_NOTA(@ID INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM NOTAS WHERE ID_NOTAS=@ID)
				BEGIN
					DELETE NOTAS WHERE ID_NOTAS=@ID
					SET @MSJ='BORRADO CORRECTAMENTE'
				END
		END TRY

		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------
--MATRICULAS
GO
CREATE OR ALTER PROCEDURE SP_CREAR_MATRICULA(@NUM INT,@IDEST VARCHAR(9),@IDMA VARCHAR(10),@ESTADO VARCHAR(3), @MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM MATRICULAS WHERE NUM_MATRICULA=@NUM)
				BEGIN
					INSERT INTO MATRICULAS(NUM_MATRICULA,IDENTIFICACIONESTUDIAN,ID_MODULOABIER,ESTADOMATRICULA)
						VALUES(@NUM,@IDEST,@IDMA,@ESTADO)
					SET @MSJ = 'SE INSERTO LA MATRICULA'
				END
		END TRY

		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_MATRICULA(@NUM INT, @MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM MATRICULAS WHERE NUM_MATRICULA=@NUM)
				BEGIN
					SET @MSJ=(SELECT CAST(NUM_MATRICULA AS varchar)+' '+IDENTIFICACIONESTUDIAN+' '+ID_MODULOABIER+' '+CAST(FECHAMATRICULA AS VARCHAR)
						+' '+ESTADOMATRICULA
					FROM MATRICULAS WHERE NUM_MATRICULA=@NUM)
				END
		END TRY

		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_MATRICULA(@NUM INT,@IDEST VARCHAR(9),@IDMA VARCHAR(10),@ESTADO VARCHAR(3), @MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM MATRICULAS WHERE NUM_MATRICULA=@NUM)
				BEGIN
					UPDATE MATRICULAS SET IDENTIFICACIONESTUDIAN=@IDEST,ID_MODULOABIER=@IDMA,ESTADOMATRICULA=@ESTADO
					WHERE NUM_MATRICULA=@NUM
					SET @MSJ = 'SE ACTUALIZARON LOS DATOS'
				END
		END TRY

		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------
GO 
CREATE OR ALTER PROCEDURE SP_BORRAR_MATRICULA(@NUM INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM MATRICULAS WHERE NUM_MATRICULA=@NUM)
				BEGIN
					DELETE MATRICULAS WHERE NUM_MATRICULA=@NUM
					SET @MSJ='SE BORRO LA MATRICULA'
				END
		END TRY

		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
---------------------------------------------------------------------------
--FACTURAS
GO
CREATE OR ALTER PROCEDURE SP_CREAR_FACTURA(@ID INT,@BECA INT,@SUBTOTAL INT,@TOTAL INT,@MSJ VARCHAR(100) OUT,@MAT INT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM FACTURAS WHERE ID_FACTURA=@ID)
				BEGIN
					INSERT INTO FACTURAS(ID_FACTURA,ID_BECA,SUBTOTAL,TOTAL,NUM_MATRICULA)
					VALUES(@ID,@BECA,@SUBTOTAL,@TOTAL,@MAT)
					SET @MSJ='SE INSERTO LA FACTURA'
				END
		END TRY

		BEGIN CATCH
			SET @MSJ = ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_FACTURA(@ID INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM FACTURAS WHERE ID_FACTURA=@ID)
				BEGIN
					SELECT ID_FACTURA,ID_BECA,SUBTOTAL,TOTAL,NUM_MATRICULA FROM FACTURAS WHERE ID_FACTURA=@ID
				END
		END TRY
		BEGIN CATCH
			SET @MSJ = ERROR_MESSAGE()
		END CATCH

	END
---------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_FACTURA(@ID INT,@BECA INT,@SUBTOTAL INT,@TOTAL INT,@MSJ VARCHAR(100) OUT,@MAT INT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM FACTURAS WHERE ID_FACTURA=@ID)
				BEGIN
					UPDATE FACTURAS SET ID_BECA=@BECA,SUBTOTAL=@SUBTOTAL,TOTAL=@TOTAL,NUM_MATRICULA=@MAT
					WHERE ID_FACTURA=@ID
				END
		END TRY

		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
--------------------------------------------------------------------------------------------------------------
GO 
CREATE OR ALTER PROCEDURE SP_BORRAR_FACTURA(@ID INT, @MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM FACTURAS WHERE ID_FACTURA=@ID)
			BEGIN
				DELETE FACTURAS WHERE ID_FACTURA=@ID
				SET @MSJ = 'SE BORRO LA FACTURA'
			END
		END TRY

		BEGIN CATCH
			SET @MSJ = ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------------
--HORARIOS
GO
CREATE OR ALTER PROCEDURE SP_CREAR_HORARIO(@ID INT,@MA VARCHAR(10),@INICIO TIME, @FIN TIME,@L VARCHAR(1)
	,@M VARCHAR(1),@K VARCHAR(1),@J VARCHAR(1),@V VARCHAR(1),@MSJ VARCHAR(100) OUT)
AS
	BEGIN 
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM HORARIOS WHERE ID_HORARIO=@ID)
			BEGIN
				INSERT INTO HORARIOS(ID_HORARIO,ID_MODULOABIERTO,HORAINICIO,HORAFIN,LUNES,MARTES,MIERCOLES,JUEVES,VIERNES)
				VALUES(@ID,@MA,@INICIO,@FIN,@L,@M,@K,@J,@V)
				SET @MSJ = 'SE INSERTO EL HORARIO'
			END
		END TRY

		BEGIN CATCH
			SET @MSJ = ERROR_MESSAGE()
		END CATCH
	END
----------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_HORARIO(@ID INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM HORARIOS WHERE ID_HORARIO=@ID)
			BEGIN
				SELECT ID_HORARIO,ID_MODULOABIERTO,HORAINICIO,HORAFIN,LUNES,MARTES,MIERCOLES,JUEVES,VIERNES FROM HORARIOS 
				WHERE ID_HORARIO=@ID
			END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
--------------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_HORARIO(@ID INT,@MA VARCHAR(10),@INICIO TIME, @FIN TIME,@L VARCHAR(1)
	,@M VARCHAR(1),@K VARCHAR(1),@J VARCHAR(1),@V VARCHAR(1),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM HORARIOS WHERE ID_HORARIO=@ID)
			BEGIN
				UPDATE HORARIOS SET ID_MODULOABIERTO=@MA,HORAINICIO=@INICIO,HORAFIN=@FIN,LUNES=@L,MARTES=@M,MIERCOLES=@K,JUEVES=@J,VIERNES=@V
				WHERE ID_HORARIO=@ID
				SET @MSJ = 'SE ACTUALIZO HORARIO'
			END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_HORARIO(@ID INT, @MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM HORARIOS WHERE ID_HORARIO=@ID)
			BEGIN
				DELETE HORARIOS WHERE ID_HORARIO=@ID
				SET @MSJ='SE BORRO EL HORARIO'
			END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END

----------------------------------------------------------------------------------------------------------------
--becas
GO
CREATE OR ALTER PROCEDURE SP_CREAR_BECA(@ID INT, @IDSO INT, @IDEST VARCHAR(9),@B1 VARCHAR(1),@B2 VARCHAR(1),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM BECAS WHERE ID_BECAS=@ID)
				BEGIN
					INSERT INTO BECAS(ID_BECAS,ID_SOCIAL,IDENTIFICACIONESTUDIAN,BECA1,BECA2)
					VALUES(@ID,@IDSO,@IDEST,@B1,@B2)
					SET @MSJ='SE AGREGO BECA'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ= ERROR_MESSAGE()
		END CATCH
	END
-------------------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_BECA(@ID INT, @MSJ VARCHAR(100))
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM BECAS WHERE ID_BECAS=@ID)
				BEGIN 
					SELECT ID_BECAS,ID_SOCIAL,IDENTIFICACIONESTUDIAN,BECA1,BECA2 FROM BECAS WHERE ID_BECAS=@ID
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-------------------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_BECA(@ID INT, @IDSO INT, @IDEST VARCHAR(9),@B1 VARCHAR(1),@B2 VARCHAR(1),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM BECAS WHERE ID_BECAS=@ID)
				BEGIN 
					UPDATE BECAS SET ID_SOCIAL=@IDSO, IDENTIFICACIONESTUDIAN=@IDEST,BECA1=@B1,BECA2=@B2
					WHERE ID_BECAS=@ID
					SET @MSJ='SE ACTUALIZO BECA'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
---------------------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_BECA(@ID INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM BECAS WHERE ID_BECAS=@ID)
				BEGIN 
					DELETE BECAS WHERE ID_BECAS=@ID
					SET @MSJ = 'SE BORRO LA BECA'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
----------------------------------------------------------------------------------------------------------------------
--LABORATORIOS
GO
CREATE OR ALTER PROCEDURE SP_CREAR_LABORATORIO(@NUMLAB TINYINT,@CAPACIDAD TINYINT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM LABORATORIOS WHERE NUMLAB=@NUMLAB)
				BEGIN 
					INSERT INTO LABORATORIOS(NUMLAB,CAPACIDAD)
					VALUES(@NUMLAB,@CAPACIDAD)
					SET @MSJ='SE INGRESO UN LABORATORIO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
---------------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_LABORATORIO(@NUMLAB TINYINT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM LABORATORIOS WHERE NUMLAB=@NUMLAB)
				BEGIN 
					SELECT NUMLAB,CAPACIDAD,HORAAPER,HORACLAU FROM LABORATORIOS WHERE NUMLAB=@NUMLAB
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
--------------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_LABORATORIO(@NUMLAB TINYINT,@CAPACIDAD TINYINT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM LABORATORIOS WHERE NUMLAB=@NUMLAB)
				BEGIN 
					UPDATE LABORATORIOS SET CAPACIDAD=@CAPACIDAD WHERE NUMLAB=@NUMLAB
					SET @MSJ='SE ACTUALIZO LABORATORIOS'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
----------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_LABORATORIO(@NUMLAB TINYINT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM LABORATORIOS WHERE NUMLAB=@NUMLAB)
				BEGIN 
					DELETE LABORATORIOS WHERE NUMLAB=@NUMLAB
					SET @MSJ='SE BORRO EL LABORATORIO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------------------------------------
--MODULOS ABIERTOS
GO
CREATE OR ALTER PROCEDURE SP_CREAR_MODULOABIERTO(@ID VARCHAR(10),@IDMOD VARCHAR(10),@IDPROF VARCHAR(9),
	@NUMLAB TINYINT,@GRUPOS TINYINT,@CUPOS TINYINT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM MODULOSABIERTOS WHERE ID_MODUABIER=@ID)
				BEGIN 
					INSERT INTO MODULOSABIERTOS(ID_MODUABIER,ID_PROFESOR,NUMLAB,GRUPOS,CUPOS,ID_MODULO)
					VALUES(@ID,@IDPROF,@NUMLAB,@GRUPOS,@CUPOS,@IDMOD)
					SET @MSJ='SE CREO EL MODULO ABIERTO'
			END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END


SELECT * FROM MODULOSABIERTOS
-------------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_MODULOABIERTO(@ID VARCHAR(10),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM MODULOSABIERTOS WHERE ID_MODUABIER=@ID)
				BEGIN 
					SELECT ID_MODUABIER,ID_MODULO,ID_PROFESOR,NUMLAB,GRUPOS,CUPOS FROM MODULOSABIERTOS WHERE ID_MODUABIER=@ID
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
--------------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_MODULOABIERTO(@ID VARCHAR(10),@IDMOD VARCHAR(10),@IDPROF VARCHAR(9),
	@NUMLAB TINYINT,@GRUPOS TINYINT,@CUPOS TINYINT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM MODULOSABIERTOS WHERE ID_MODUABIER=@ID)
				BEGIN 
					UPDATE MODULOSABIERTOS SET ID_PROFESOR=@IDPROF,NUMLAB=@NUMLAB,GRUPOS=@GRUPOS,CUPOS=@CUPOS,ID_MODULO=@IDMOD
					WHERE ID_MODUABIER=@ID
					SET @MSJ='SE ACTUALIZO EL MODULO ABIERTO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END

------------------------------------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_MODULOABIERTO(@ID VARCHAR(10),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM MODULOSABIERTOS WHERE ID_MODUABIER=@ID)
				BEGIN 
					DELETE MODULOSABIERTOS WHERE ID_MODUABIER=@ID
					SET @MSJ='SE BORRO EL MODULO ABIERTO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-------------------------------------------------------------------------------------------------------------------------------------
--SITUACION SOCIAL
GO
CREATE OR ALTER PROCEDURE SP_CREAR_SITUACIONSO(@ID INT,@IDEST VARCHAR(9),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM SITUACIONESSOCIALES WHERE ID_SOCIAL=@ID)
				BEGIN 
					INSERT INTO SITUACIONESSOCIALES(ID_SOCIAL,IDENTIFICACIONESTUDIAN)
					VALUES(@ID,@IDEST)
					SET @MSJ = 'SE INSERTO SITUACION'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_SITUACIONSO(@ID INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM SITUACIONESSOCIALES WHERE ID_SOCIAL=@ID)
				BEGIN 
					SELECT ID_SOCIAL,IDENTIFICACIONESTUDIAN,ESTADOSOCIAL,RESUMEN FROM SITUACIONESSOCIALES WHERE ID_SOCIAL=@ID
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
---------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_SITUACIONSO(@ID INT,@IDEST VARCHAR(9),@EST VARCHAR(3),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM SITUACIONESSOCIALES WHERE ID_SOCIAL=@ID)
				BEGIN 
					UPDATE SITUACIONESSOCIALES SET IDENTIFICACIONESTUDIAN=@IDEST,ESTADOSOCIAL=@EST WHERE ID_SOCIAL=@ID
					SET @MSJ = 'SE ACTUALIZO SITUACION'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
--------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_SITUACIONSO(@ID INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF  EXISTS(SELECT 1 FROM SITUACIONESSOCIALES WHERE ID_SOCIAL=@ID)
				BEGIN 
					DELETE SITUACIONESSOCIALES WHERE ID_SOCIAL=@ID
					SET @MSJ = 'SE BORRO SITUACION'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
----------------------------------------------------------------------
--VACACIONES
GO
CREATE OR ALTER PROCEDURE SP_CREAR_VACACIONES(@ID VARCHAR(6),@IDPROF VARCHAR(9),@FECHA DATE,@CANTIDAD TINYINT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM SITUACIONESSOCIALES WHERE ID_SOCIAL=@ID)
				BEGIN 
					INSERT INTO VACACIONES(ID_VACACIONES,ID_PROFESOR,FECHAINICIO,CANTIDADDIAS)
					VALUES(@ID,@IDPROF,@FECHA,@CANTIDAD)
					SET @MSJ = 'SE INSERTO VACACION'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
----------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_VACACIONES(@ID VARCHAR(6),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM VACACIONES WHERE ID_VACACIONES=@ID)
				BEGIN 
					SELECT ID_VACACIONES,ID_PROFESOR,FECHAINICIO,CANTIDADDIAS FROM VACACIONES WHERE ID_VACACIONES=@ID
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
----------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_VACACIONES(@ID VARCHAR(6),@IDPROF VARCHAR(9),@FECHA DATE,@CANTIDAD TINYINT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM VACACIONES WHERE ID_VACACIONES=@ID)
				BEGIN 
					UPDATE VACACIONES SET ID_PROFESOR=@IDPROF,FECHAINICIO=@FECHA,CANTIDADDIAS=@CANTIDAD WHERE ID_VACACIONES=@ID
					SET @MSJ = 'SE ACTUALIZO VACACION'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
---------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_VACACIONES(@ID VARCHAR(6),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM VACACIONES WHERE ID_VACACIONES=@ID)
				BEGIN 
					DELETE VACACIONES WHERE ID_VACACIONES=@ID
					SET @MSJ = 'SE BORRO VACACION'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
--------------------------------------------------------------------
--CERTIFICADO
GO
CREATE OR ALTER PROCEDURE SP_CREAR_CERTIFICADO(@ID INT,@NOMBRE VARCHAR(50),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM CERTIFICADO WHERE COD_CERTIFI=@ID)
				BEGIN 
					INSERT INTO CERTIFICADO(COD_CERTIFI,NOMBRE)
					VALUES(@ID,@NOMBRE)
					SET @MSJ = 'SE INSERTO CERTIFICADO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_CERTIFICADO(@ID INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM CERTIFICADO WHERE COD_CERTIFI=@ID)
				BEGIN 
					SELECT COD_CERTIFI,NOMBRE FROM CERTIFICADO WHERE COD_CERTIFI=@ID
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
----------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_CERTIFICADO(@ID INT,@NOMBRE VARCHAR(50),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM CERTIFICADO WHERE COD_CERTIFI=@ID)
				BEGIN 
					UPDATE CERTIFICADO SET NOMBRE=@NOMBRE WHERE COD_CERTIFI=@ID
					SET @MSJ = 'SE ACTUALIZO CERTIFICADO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_CERTIFICADO(@ID INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM CERTIFICADO WHERE COD_CERTIFI=@ID)
				BEGIN 
					DELETE CERTIFICADO WHERE COD_CERTIFI=@ID
					SET @MSJ = 'SE BORRO CERTIFICADO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-------------------------------------------------------------------------------------------------
--CERTIFICACIONES
GO
CREATE OR ALTER PROCEDURE SP_CREAR_CERTIFICACION(@ID VARCHAR(6),@IDPROF VARCHAR(9),@IDCER INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM CERTIFICACIONES WHERE ID_CERTIFICACION=@ID)
				BEGIN 
					INSERT INTO CERTIFICACIONES(ID_CERTIFICACION,COD_CERTIFI,ID_PROFESOR)
					VALUES(@ID,@IDCER,@IDPROF)
					SET @MSJ = 'SE INSERTO CERTIFICACION'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
----------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_CERTIFICACION(@ID VARCHAR(6),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM CERTIFICACIONES WHERE ID_CERTIFICACION=@ID)
				BEGIN 
					SELECT ID_CERTIFICACION,COD_CERTIFI,ID_PROFESOR FROM CERTIFICACIONES WHERE ID_CERTIFICACION=@ID
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
---------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_CERTIFICACION(@ID VARCHAR(6),@IDPROF VARCHAR(9),@IDCER INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM CERTIFICACIONES WHERE ID_CERTIFICACION=@ID)
				BEGIN 
					UPDATE CERTIFICACIONES SET ID_CERTIFICACION=@ID,ID_PROFESOR=@IDPROF,COD_CERTIFI=@IDCER WHERE ID_CERTIFICACION=@ID
					SET @MSJ = 'SE ACTUALIZO CERTIFICACION'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
---------------------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_CERTIFICACION(@ID VARCHAR(6),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM CERTIFICACIONES WHERE ID_CERTIFICACION=@ID)
				BEGIN 
					DELETE CERTIFICACIONES WHERE ID_CERTIFICACION=@ID
					SET @MSJ = 'SE BORRO CERTIFICACION'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
------------------------------------------------------------------------------
--PROGRAMAS
GO
CREATE OR ALTER PROCEDURE SP_CREAR_PROGRAMA(@ID VARCHAR(6),@NOMBRE VARCHAR(45),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM PROGRAMAS WHERE ID_PROGRAMA=@ID)
				BEGIN 
					INSERT INTO PROGRAMAS(ID_PROGRAMA,NOMBRE)
					VALUES(@ID,@NOMBRE)
					SET @MSJ = 'SE INSERTO PROGRAMA'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
---------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_PROGRAMA(@ID VARCHAR(6),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM PROGRAMAS WHERE ID_PROGRAMA=@ID)
				BEGIN 
					SELECT ID_PROGRAMA,NOMBRE,CANTIDADMODULOS,DESCRIPCION FROM PROGRAMAS WHERE ID_PROGRAMA=@ID
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-------------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_PROGRAMA(@ID VARCHAR(6),@NOMBRE VARCHAR(45),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM PROGRAMAS WHERE ID_PROGRAMA=@ID)
				BEGIN 
					UPDATE PROGRAMAS SET ID_PROGRAMA=@ID,NOMBRE=@NOMBRE WHERE ID_PROGRAMA=@ID
					SET @MSJ = 'SE ACTUALIZO PROGRAMA'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
--------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_PROGRAMA(@ID VARCHAR(6),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM PROGRAMAS WHERE ID_PROGRAMA=@ID)
				BEGIN 
					DELETE PROGRAMAS WHERE ID_PROGRAMA=@ID
					SET @MSJ = 'SE BORRO PROGRAMA'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
------------------------------------------------------------------------
--MODULOS
GO
CREATE OR ALTER PROCEDURE SP_CREAR_MODULOS(@ID VARCHAR(10),@IDPRO VARCHAR(6),@NOMBRE VARCHAR(45),@HORAS INT,@PRECIO INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM MODULOS WHERE ID_MODULO=@ID)
				BEGIN 
					INSERT INTO MODULOS(ID_MODULO,ID_PROGRAMA,NOMBREMODULO,HORAS,PRECIO)
					VALUES(@ID,@IDPRO,@NOMBRE,@HORAS,@PRECIO)
					SET @MSJ = 'SE INSERTO MODULO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
--------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_MODULOS(@ID VARCHAR(10),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM MODULOS WHERE ID_MODULO=@ID)
				BEGIN 
					SELECT ID_MODULO,ID_PROGRAMA,NOMBREMODULO,HORAS,PRECIO,DESCRIPCION FROM MODULOS WHERE ID_MODULO=@ID
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
--------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_MODULOS(@ID VARCHAR(10),@IDPRO VARCHAR(6),@NOMBRE VARCHAR(45),@HORAS INT,@PRECIO INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM MODULOS WHERE ID_MODULO=@ID)
				BEGIN 
					UPDATE MODULOS SET ID_PROGRAMA=@IDPRO,NOMBREMODULO=@NOMBRE,HORAS=@HORAS,PRECIO=@PRECIO WHERE ID_MODULO=@ID
					SET @MSJ = 'SE ACTUALIZO MODULO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_MODULOS(@ID VARCHAR(10),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM MODULOS WHERE ID_MODULO=@ID)
				BEGIN 
					DELETE MODULOS WHERE ID_MODULO=@ID
					SET @MSJ = 'SE BORRO MODULO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------------
--PROFESORES
GO
CREATE OR ALTER PROCEDURE SP_CREAR_PROFESOR(@ID VARCHAR(9),@NOMBRE VARCHAR(10),@APELLIDO1 VARCHAR(45),@TELEFONO VARCHAR(10),@CORREO VARCHAR(20)
	,@FECHA DATE,@PROVINCIA VARCHAR(10),@IGEN VARCHAR(3),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM PROFESORES WHERE ID_PROFESOR=@ID)
				BEGIN 
					INSERT INTO PROFESORES(ID_PROFESOR,NOMBRE,APELLIDO1,NUMEROTELEFONO,CORREOINSTITU,FECHANACIMIENTO,PROVINCIA,IDENTIDADGENERO)
					VALUES(@ID,@NOMBRE,@APELLIDO1,@TELEFONO,@CORREO,@FECHA,@PROVINCIA,@IGEN)
					SET @MSJ = 'SE INSERTO PROFESOR'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
----------------------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_PROFESOR(@ID VARCHAR(9),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM PROFESORES WHERE ID_PROFESOR=@ID)
				BEGIN 
					SELECT ID_PROFESOR,NOMBRE,APELLIDO1,NUMEROTELEFONO,CORREOINSTITU,FECHANACIMIENTO,PROVINCIA,IDENTIDADGENERO FROM PROFESORES 
						WHERE ID_PROFESOR=@ID
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_PROFESOR(@ID VARCHAR(9),@NOMBRE VARCHAR(10),@APELLIDO1 VARCHAR(45),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM PROFESORES WHERE ID_PROFESOR=@ID)
				BEGIN 
					UPDATE PROFESORES SET NOMBRE=@NOMBRE,APELLIDO1=@APELLIDO1 WHERE ID_PROFESOR=@ID
					SET @MSJ = 'SE ACTUALIZO PROFESOR'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_PROFESOR(@ID VARCHAR(9),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM PROFESORES WHERE ID_PROFESOR=@ID)
				BEGIN 
					DELETE PROFESORES WHERE ID_PROFESOR=@ID
					SET @MSJ = 'SE BORRO PROFESOR'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END

----------------------------------------------------------------------------------------
--FERIADOS
GO
CREATE OR ALTER PROCEDURE SP_CREAR_FERIADO(@ID INT,@FECHA DATE,@NOMBRE VARCHAR(10),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF NOT EXISTS(SELECT 1 FROM FERIADO WHERE COD_FERIADO=@ID)
				BEGIN 
					INSERT INTO FERIADO(COD_FERIADO,FECHA,NOMBRE)
					VALUES(@ID,@FECHA,@NOMBRE)
					SET @MSJ = 'SE INSERTO FERIADO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
----------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_LEER_FERIADO(@ID INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM FERIADO WHERE COD_FERIADO=@ID)
				BEGIN 
					SELECT COD_FERIADO,FECHA,NOMBRE FROM FERIADO WHERE COD_FERIADO=@ID
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_FERIADO(@ID INT,@FECHA DATE,@NOMBRE VARCHAR(10),@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM FERIADO WHERE COD_FERIADO=@ID)
				BEGIN 
					UPDATE FERIADO SET FECHA=@FECHA,NOMBRE=@NOMBRE WHERE COD_FERIADO=@ID
					SET @MSJ = 'SE ACTULIZO FERIADO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
-----------------------------------------------------------------------
GO
CREATE OR ALTER PROCEDURE SP_BORRAR_FERIADO(@ID INT,@MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			IF EXISTS(SELECT 1 FROM FERIADO WHERE COD_FERIADO=@ID)
				BEGIN 
					DELETE FERIADO WHERE COD_FERIADO=@ID
					SET @MSJ = 'SE BORRO FERIADO'
				END
		END TRY
		BEGIN CATCH
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END



/***********************************************************************************************/
--2. Al menos 8 Funciones 
GO
CREATE OR ALTER FUNCTION FN_CALCULAR_FECHA_FIN_MA(@ID_MOD_ABI VARCHAR(10))
RETURNS DATE AS
BEGIN
	DECLARE @FECHA DATE
	DECLARE @HORAS INT
	DECLARE @HORASDIARIA INT
	DECLARE @L VARCHAR(1),@M VARCHAR(1),@K VARCHAR(1),@J VARCHAR(1),@V VARCHAR(1)
	DECLARE @DAY INT

	SET @FECHA=(SELECT FECHA_APER FROM MODULOSABIERTOS WHERE ID_MODUABIER=@ID_MOD_ABI)

	SET @HORAS=(SELECT HORAS FROM MODULOS M INNER JOIN MODULOSABIERTOS MA 
		ON M.ID_MODULO=MA.ID_MODULO WHERE ID_MODUABIER=@ID_MOD_ABI)
	SET @HORASDIARIA = (SELECT DATEDIFF(HH,HORAINICIO,HORAFIN) FROM HORARIOS H INNER JOIN MODULOSABIERTOS MA 
		ON MA.ID_MODUABIER=@ID_MOD_ABI)

	SET @L=(SELECT LUNES FROM HORARIOS WHERE ID_MODULOABIERTO=@ID_MOD_ABI)
	SET @M=(SELECT MARTES FROM HORARIOS WHERE ID_MODULOABIERTO=@ID_MOD_ABI)
	SET @K=(SELECT MIERCOLES FROM HORARIOS WHERE ID_MODULOABIERTO=@ID_MOD_ABI)
	SET @J=(SELECT JUEVES FROM HORARIOS WHERE ID_MODULOABIERTO=@ID_MOD_ABI)
	SET @V=(SELECT VIERNES FROM HORARIOS WHERE ID_MODULOABIERTO=@ID_MOD_ABI)
	SET @DAY=DATEPART(DW,@FECHA)

	WHILE(@HORAS>0)
		BEGIN
			IF NOT EXISTS(SELECT 1 FROM FERIADO WHERE FECHA=@FECHA)
				BEGIN
					IF(@DAY=1 AND @L='Y')
						BEGIN
							SET @HORAS=@HORAS-@HORASDIARIA
						END
					IF(@DAY=2 AND @M='Y')
						BEGIN
							SET @HORAS=@HORAS-@HORASDIARIA
						END
					IF(@DAY=3 AND @K='Y')
						BEGIN
							SET @HORAS=@HORAS-@HORASDIARIA
						END
					IF(@DAY=4 AND @J='Y')
						BEGIN
							SET @HORAS=@HORAS-@HORASDIARIA
						END
					IF(@DAY=5 AND @V='Y')
						BEGIN
							SET @HORAS=@HORAS-@HORASDIARIA
						END
				END
			SET @FECHA= DATEADD(DD,1,@FECHA)
			SET @DAY=DATEPART(DW,@FECHA)
		END

	RETURN @FECHA
END
------------------------------------------------------------------------
GO
CREATE OR ALTER FUNCTION FN_TOTAL_HORAS_ESTUDIANTE(@IDESTU VARCHAR(9))
RETURNS INT AS
BEGIN
	DECLARE @SUMATORIA INT
	SET @SUMATORIA = (SELECT SUM(HORAS) FROM MODULOS M INNER JOIN MODULOSABIERTOS MA
		ON M.ID_MODULO=MA.ID_MODULO INNER JOIN MATRICULAS MAT
		ON MA.ID_MODUABIER= MAT.ID_MODULOABIER 
		WHERE MAT.IDENTIFICACIONESTUDIAN = @IDESTU)

	RETURN @SUMATORIA
END
------------------------------------------------------------------------------
GO
CREATE OR ALTER FUNCTION FN_DESCUENTO_FACTURA(@IDFACTURA INT)
RETURNS INT AS
BEGIN
	DECLARE @IDBECA INT
	DECLARE @DESCUENTO INT
	DECLARE @BECA1 VARCHAR(1), @BECA2 VARCHAR(1)
	SET @DESCUENTO = 0

	SET @IDBECA = (SELECT ID_BECAS FROM BECAS B INNER JOIN FACTURAS F ON B.ID_BECAS =F.ID_BECA
		WHERE ID_FACTURA=@IDFACTURA)
	SET @BECA1 = (SELECT BECA1 FROM BECAS WHERE ID_BECAS=@IDBECA)
	SET @BECA2 = (SELECT BECA2 FROM BECAS WHERE ID_BECAS=@IDBECA)

	IF(@BECA1='S')
		SET @DESCUENTO=@DESCUENTO+75000
	IF(@BECA2='S')
		SET @DESCUENTO=@DESCUENTO+(SELECT SUBTOTAL FROM FACTURAS WHERE ID_FACTURA=@IDFACTURA)

	RETURN @DESCUENTO
END
------------------------------------------------------------------------
GO
CREATE OR ALTER FUNCTION FN_CANTIDAD_FERIADOS_EN_MODULOS_ABIERTO(@ID_MO_AB VARCHAR(10))
RETURNS INT AS
BEGIN
	DECLARE @CANTIDAD INT,@INICIO DATE, @FIN DATE

	SET @INICIO=(SELECT FECHA_APER FROM MODULOSABIERTOS WHERE ID_MODUABIER=@ID_MO_AB)
	SET @FIN=(SELECT FECHAFIN FROM MODULOSABIERTOS WHERE ID_MODUABIER=@ID_MO_AB)
	SET @CANTIDAD=(SELECT COUNT(COD_FERIADO) FROM FERIADO WHERE FECHA BETWEEN @INICIO AND @FIN)
	RETURN @CANTIDAD
END
--------------------------------------------------------------------------------
GO
CREATE OR ALTER FUNCTION FN_CUPOS_MOCULO_ABIERTO(@ID_MO_AB VARCHAR(10))
RETURNS INT AS
BEGIN
	DECLARE @CUPOS INT
	DECLARE @CANTIDADMAT INT
	
	SET @CANTIDADMAT=(SELECT COUNT(NUM_MATRICULA) FROM MATRICULAS M INNER JOIN MODULOSABIERTOS MA
		ON MA.ID_MODUABIER=M.ID_MODULOABIER WHERE MA.ID_MODUABIER=@ID_MO_AB)
	SET @CUPOS=(SELECT CUPOS FROM MODULOSABIERTOS WHERE ID_MODUABIER=@ID_MO_AB)

	SET @CUPOS=@CUPOS-@CANTIDADMAT

	RETURN @CUPOS
END
--------------------------------------------------------------------------------
GO
CREATE OR ALTER FUNCTION FN_APELLIDO2_PROF(@IDPROF VARCHAR(9))
RETURNS VARCHAR(100) AS
BEGIN
	DECLARE @APELLIDO2 VARCHAR(10)
	IF (SELECT APELLIDO2 FROM PROFESORES WHERE ID_PROFESOR =@IDPROF) IS NULL
		SET @APELLIDO2=' '

	RETURN @APELLIDO2
END
-------------------------------------------------------------------------------
GO
CREATE OR ALTER FUNCTION FN_PAGO_FACTURA(@IDFACTURA INT)
RETURNS VARCHAR(3) AS
BEGIN
	DECLARE @ESTADOMATRICULA VARCHAR(3)
	IF(SELECT PAGOACEPTADO FROM FACTURAS WHERE ID_FACTURA=@IDFACTURA) = 0
		SET @ESTADOMATRICULA='INA'
	RETURN @ESTADOMATRICULA
END
-----------------------------------------------------------------------------
GO
CREATE OR ALTER FUNCTION FN_CUMPLEANOS_PROFESOR(@IDPROF VARCHAR(9))
RETURNS INT AS 
BEGIN
	DECLARE @EDAD INT
	SET @EDAD=(SELECT DATEDIFF(YY,FECHANACIMIENTO,GETDATE()) FROM PROFESORES WHERE ID_PROFESOR=@IDPROF)
	RETURN @EDAD
END
-----------------------------------------------------------------------------


--*****************************************************************************
--3. Al menos 7 Trigger
GO
CREATE OR ALTER TRIGGER TR_APROVADO_NOTAS
ON NOTAS FOR INSERT
AS 
	DECLARE @IDNOTA INT
	SET @IDNOTA = (SELECT inserted.ID_NOTAS FROM inserted)
	IF(SELECT PORCENTAJE FROM NOTAS WHERE ID_NOTAS=@IDNOTA)>=70
		UPDATE NOTAS SET APROVADO='APR' WHERE ID_NOTAS=@IDNOTA
	ELSE 
		UPDATE NOTAS SET APROVADO='REP' WHERE ID_NOTAS=@IDNOTA
-------------------------------------------------------------------
GO
CREATE OR ALTER TRIGGER TR_ESTADO_MATRICULAS
ON FACTURAS FOR UPDATE
AS
	DECLARE @NUM_MATRICULA INT
	IF EXISTS (SELECT 1 FROM deleted WHERE PAGOACEPTADO=0)
	BEGIN
		SET @NUM_MATRICULA=(SELECT NUM_MATRICULA FROM deleted)
		IF NOT EXISTS(SELECT 1 FROM FACTURAS WHERE NUM_MATRICULA=@NUM_MATRICULA)
			UPDATE MATRICULAS SET ESTADOMATRICULA = 'INA' WHERE NUM_MATRICULA=@NUM_MATRICULA
	END
-------------------------------------------------------------------
GO
CREATE OR ALTER TRIGGER TR_CERTIFICADO_NECESARIO_MODULOS_ABIERTO
ON MODULOSABIERTOS FOR INSERT
AS
	DECLARE @IDMA VARCHAR(10)
	SET @IDMA = (SELECT ID_MODUABIER FROM inserted)
	IF NOT EXISTS(SELECT 1 FROM PROFESORES P INNER JOIN CERTIFICACIONES C ON P.ID_PROFESOR=C.ID_PROFESOR
		INNER JOIN CERTIFICADO CT ON CT.COD_CERTIFI=C.COD_CERTIFI
		INNER JOIN MODULOS M ON CT.COD_CERTIFI=M.ID_MODULO
		INNER JOIN MODULOSABIERTOS MA ON M.ID_MODULO=MA.ID_MODULO WHERE ID_MODUABIER=@IDMA)
	BEGIN
		DELETE MODULOSABIERTOS WHERE ID_MODUABIER=@IDMA
	END
------------------------------------------------------------------
GO
CREATE OR ALTER TRIGGER TR_CANTIDAD_MOD_PROGRAMAS
ON MODULOS FOR UPDATE
AS
	DECLARE @CODPROGRA VARCHAR(20)
	SET @CODPROGRA = (SELECT ID_PROGRAMA FROM inserted)
	UPDATE PROGRAMAS SET CANTIDADMODULOS=(SELECT COUNT(ID_MODULO) FROM MODULOS WHERE ID_PROGRAMA=@CODPROGRA) 
		WHERE ID_PROGRAMA=@CODPROGRA
------------------------------------------------------------------
GO
CREATE OR ALTER TRIGGER TR_TOTAL_FACTURA
ON FACTURAS FOR INSERT
AS
	DECLARE @SUBTOTAL INT,@DESCUENTO INT,@ID_FACTURA INT
	SET @SUBTOTAL=(SELECT SUBTOTAL FROM inserted)
	SET @DESCUENTO=(SELECT DESCUENTO FROM inserted)
	SET @ID_FACTURA=(SELECT ID_FACTURA FROM inserted)

	UPDATE FACTURAS SET TOTAL=(@SUBTOTAL-@DESCUENTO)  WHERE ID_FACTURA=@ID_FACTURA
----------------------------------------------------------------------------------
GO
CREATE OR ALTER TRIGGER TR_EDAD_PROF_BORRAR
ON PROFESORES FOR INSERT
AS
	DECLARE @ID_PROF VARCHAR(10),@EDAD INT
	SET @ID_PROF=(SELECT ID_PROFESOR FROM inserted)
	SET @EDAD=dbo.FN_CUMPLEANOS_PROFESOR(@ID_PROF)

	IF 18 > @EDAD
		DELETE PROFESORES WHERE ID_PROFESOR=@ID_PROF
-------------------------------------------------------------------------------------
GO
CREATE OR ALTER TRIGGER TR_ACTIVAR_MATRICULAS
ON FACTURAS AFTER UPDATE
AS
	DECLARE @NUMMATRICULA INT
	SET @NUMMATRICULA=(SELECT @NUMMATRICULA FROM inserted)

	IF EXISTS(SELECT 1 FROM FACTURAS WHERE NUM_MATRICULA=@NUMMATRICULA AND PAGOACEPTADO=1)
		UPDATE MATRICULAS SET ESTADOMATRICULA = 'ACT' WHERE NUM_MATRICULA=@NUMMATRICULA

---------------------------------------------------------------------------------------



/*4. Crear un SP para abrir un módulo. Debe contemplar todas las validaciones correspondientes. Utilice los
SP creados anteriormente.*/
GO
CREATE OR ALTER PROCEDURE SP_ABRIR_MODULOS(@ID VARCHAR(10),@IDMOD VARCHAR(10),@IDPROF VARCHAR(9),
	@NUMLAB TINYINT,@GRUPOS TINYINT,@CUPOS TINYINT,@MSJ VARCHAR(100) OUT)
AS

BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
			IF NOT EXISTS(SELECT 1 FROM MODULOSABIERTOS WHERE ID_MODUABIER=@ID)
				BEGIN
					EXECUTE [dbo].[SP_CREAR_MODULOABIERTO] @ID,@IDMOD,@IDPROF,@NUMLAB,@GRUPOS,@CUPOS,@MSJ OUTPUT
				END
			ELSE
				BEGIN
					EXECUTE [dbo].[SP_ACTUALIZAR_MODULOABIERTO] @ID,@IDMOD,@IDPROF,@NUMLAB,@GRUPOS,@CUPOS,@MSJ OUTPUT
				END
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ=ERROR_MESSAGE()
	END CATCH
END

GO
DECLARE @ID VARCHAR(10),@IDMOD VARCHAR(10),@IDPROF VARCHAR(9), @NUMLAB TINYINT,@GRUPOS TINYINT,@CUPOS TINYINT,@MSJ VARCHAR(100)
SET @ID ='MAB-001'
SET @IDMOD='MV-001'
SET @IDPROF='PROF0001'
SET @NUMLAB=5
SET @GRUPOS=7
SET @CUPOS=23

EXECUTE [dbo].[SP_ABRIR_MODULOS]  @ID,@IDMOD,@IDPROF, @NUMLAB,@GRUPOS,@CUPOS,@MSJ OUTPUT
PRINT @MSJ
SELECT *FROM LABORATORIOS
SELECT * FROM MODULOSABIERTOS
----------------------------------------------------------------------------------
--5. Crear un SP para realizar la matrícula de un estudiante, contemplando todas las aristas necesarias.
GO
CREATE OR ALTER PROCEDURE SP_MATRICULAR(@NUM INT,@IDEST VARCHAR(9),@IDMA VARCHAR(10),@ESTADO VARCHAR(3), @MSJ VARCHAR(100) OUT)
AS
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION
				IF NOT EXISTS(SELECT 1 FROM MATRICULAS WHERE NUM_MATRICULA=@NUM)
				BEGIN
					EXECUTE [dbo].[SP_CREAR_MATRICULA] @NUM ,@IDEST ,@IDMA ,@ESTADO , @MSJ OUTPUT
				END
				ELSE
					BEGIN
						EXECUTE [dbo].[SP_ACTUALIZAR_MATRICULA] @NUM ,@IDEST ,@IDMA ,@ESTADO , @MSJ OUTPUT
					END
			COMMIT TRANSACTION
		END TRY
		BEGIN CATCH 
			ROLLBACK TRANSACTION
			SET @MSJ=ERROR_MESSAGE()
		END CATCH
	END
GO
DECLARE @NUM INT,@IDEST VARCHAR(9),@IDMA VARCHAR(10),@ESTADO VARCHAR(3), @MSJ VARCHAR(100)
SET @NUM = 12
SET @IDEST='101110111' 
SET @IDMA='MAB-001'
SET @ESTADO = 'INA'
 EXECUTE [dbo].[SP_MATRICULAR] @NUM ,@IDEST ,@IDMA ,@ESTADO , @MSJ OUTPUT
 PRINT @MSJ

SELECT *FROM MATRICULAS